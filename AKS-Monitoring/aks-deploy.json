{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "apiVersion": {
            "type": "String"
        },
        "resourceName": {
            "type": "String",
            "metadata": {
                "description": "The name of the Managed Cluster resource."
            }
        },
        "location": {
            "type": "String",
            "metadata": {
                "description": "The location of AKS resource."
            }
        },
        "isLocationEdgeZone": {
            "defaultValue": false,
            "type": "Bool"
        },
        "edgeZone": {
            "defaultValue": {},
            "type": "Object",
            "metadata": {
                "description": "Extended location of the cluster."
            }
        },
        "useServicePrincipal": {
            "defaultValue": false,
            "type": "Bool"
        },
        "clusterSku": {
            "defaultValue": {
                "name": "Base",
                "tier": "Standard"
            },
            "type": "Object",
            "metadata": {
                "descirption": "The managed cluster SKU tier."
            }
        },
        "clusterTags": {
            "defaultValue": {},
            "type": "Object",
            "metadata": {
                "description": "Specifies the tags of the AKS cluster."
            }
        },
        "tagsForAllResources": {
            "defaultValue": {},
            "type": "Object"
        },
        "clusterIdentity": {
            "defaultValue": {
                "type": "SystemAssigned"
            },
            "type": "Object",
            "metadata": {
                "description": "The identity of the managed cluster, if configured."
            }
        },
        "enableAadProfile": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Flag to turn on or off of Microsoft Entra ID Profile."
            }
        },
        "aadProfile": {
            "defaultValue": {},
            "type": "Object",
            "metadata": {
                "descirption": "The Microsoft Entra ID configuration."
            }
        },
        "dnsPrefix": {
            "type": "String",
            "metadata": {
                "description": "Optional DNS prefix to use with hosted Kubernetes API server FQDN."
            }
        },
        "kubernetesVersion": {
            "defaultValue": "1.7.7",
            "type": "String",
            "metadata": {
                "description": "The version of Kubernetes."
            }
        },
        "enableRBAC": {
            "defaultValue": true,
            "type": "Bool",
            "metadata": {
                "description": "Boolean flag to turn on and off of RBAC."
            }
        },
        "windowsProfile": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Boolean flag to turn on and off of virtual machine scale sets"
            }
        },
        "nodeResourceGroup": {
            "type": "String",
            "metadata": {
                "description": "The name of the resource group containing agent pool nodes."
            }
        },
        "upgradeChannel": {
            "defaultValue": "none",
            "allowedValues": [
                "none",
                "patch",
                "rapid",
                "stable",
                "node-image"
            ],
            "type": "String",
            "metadata": {
                "description": "Auto upgrade channel for a managed cluster."
            }
        },
        "servicePrincipalClientId": {
            "defaultValue": "",
            "type": "SecureString",
            "metadata": {
                "description": "Client ID (used by cloudprovider)."
            }
        },
        "servicePrincipalClientSecret": {
            "defaultValue": "",
            "type": "SecureString",
            "metadata": {
                "description": "The Service Principal Client Secret."
            }
        },
        "adminGroupObjectIDs": {
            "defaultValue": "",
            "type": "Array",
            "metadata": {
                "description": "An array of Microsoft Entra group object ids to give administrative access."
            }
        },
        "principalId": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "The objectId of service principal."
            }
        },
        "supportPlan": {
            "defaultValue": "KubernetesOfficial",
            "allowedValues": [
                "AKSLongTermSupport",
                "KubernetesOfficial"
            ],
            "type": "String"
        },
        "azureRbac": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Enable or disable Azure RBAC."
            }
        },
        "disableLocalAccounts": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Enable or disable local accounts."
            }
        },
        "enablePrivateCluster": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Enable private network access to the Kubernetes cluster."
            }
        },
        "isPrivateClusterSupported": {
            "defaultValue": false,
            "type": "Bool"
        },
        "enableAuthorizedIpRange": {
            "defaultValue": false,
            "type": "Bool"
        },
        "authorizedIPRanges": {
            "defaultValue": [],
            "type": "Array",
            "metadata": {
                "description": "Boolean flag to turn on and off http application routing."
            }
        },
        "isPublicNetworkAccessEnabled": {
            "defaultValue": false,
            "type": "Bool"
        },
        "publicNetworkAccess": {
            "defaultValue": "Enabled",
            "allowedValues": [
                "Disabled",
                "Enabled",
                "SecuredByPerimeter"
            ],
            "type": "String",
            "metadata": {
                "description": "Allow or deny public network access for AKS."
            }
        },
        "enableDiskEncryptionSetID": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Flag to turn on or off of diskEncryptionSetID. Set diskEncryptionSetID to null when false."
            }
        },
        "diskEncryptionSetID": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "The ID of the disk encryption set used to encrypt the OS disks of the nodes."
            }
        },
        "aadSessionKey": {
            "defaultValue": "",
            "type": "SecureString"
        },
        "isAzurePolicySupported": {
            "defaultValue": false,
            "type": "Bool"
        },
        "enableAzurePolicy": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Boolean flag to turn on and off Azure Policy addon."
            }
        },
        "isSecretStoreCSIDDriverSupported": {
            "defaultValue": false,
            "type": "Bool"
        },
        "enableSecretStoreCSIDriver": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Boolean flag to turn on and off secret store CSI driver."
            }
        },
        "enableOmsAgent": {
            "defaultValue": true,
            "type": "Bool",
            "metadata": {
                "description": "Boolean flag to turn on and off omsagent addon."
            }
        },
        "workspaceRegion": {
            "defaultValue": "East US",
            "type": "String",
            "metadata": {
                "description": "Specify the region for your OMS workspace."
            }
        },
        "workspaceName": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Specify the name of the OMS workspace."
            }
        },
        "omsWorkspaceId": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Specify the resource id of the OMS workspace."
            }
        },
        "omsSku": {
            "defaultValue": "standalone",
            "allowedValues": [
                "free",
                "standalone",
                "pernode"
            ],
            "type": "String",
            "metadata": {
                "description": "Select the SKU for your workspace."
            }
        },
        "aciVnetSubnetName": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Name of virtual network subnet used for the ACI Connector."
            }
        },
        "aciConnectorLinuxEnabled": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Enables the Linux ACI Connector."
            }
        },
        "acrName": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Specify the name of the Azure Container Registry."
            }
        },
        "acrResourceGroup": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "The name of the resource group the container registry is associated with."
            }
        },
        "guidValue": {
            "defaultValue": "[newGuid()]",
            "type": "String",
            "metadata": {
                "description": "The unique id used in the role assignment of the kubernetes service to the container registry service. It is recommended to use the default value."
            }
        },
        "enableVnetSubnetID": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Flag to turn on or off of vnetSubnetID."
            }
        },
        "vnetSubnetID": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Resource ID of virtual network subnet used for nodes and/or pods IP assignment."
            }
        },
        "loadBalancerSku": {
            "defaultValue": "Standard",
            "allowedValues": [
                "Basic",
                "Standard"
            ],
            "type": "String",
            "metadata": {
                "description": "Specifies the sku of the load balancer used by the virtual machine scale sets used by node pools."
            }
        },
        "networkPolicy": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Network policy used for building the Kubernetes network."
            }
        },
        "networkPlugin": {
            "defaultValue": "azure",
            "allowedValues": [
                "azure",
                "kubenet"
            ],
            "type": "String",
            "metadata": {
                "description": "Network plugin used for building the Kubernetes network."
            }
        },
        "networkPluginMode": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Network plugin mode used for building the Kubernetes network."
            }
        },
        "networkDataplane": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Network dataplane used in the Kubernetes cluster."
            }
        },
        "serviceCidr": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "A CIDR notation IP range from which to assign service cluster IPs."
            }
        },
        "dnsServiceIP": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Containers DNS server IP address."
            }
        },
        "spotMaxPrice": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "Possible values are any decimal value greater than zero or -1 which indicates the willingness to pay any on-demand price."
            }
        },
        "vmssNodePool": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Boolean flag to turn on and off of virtual machine scale sets"
            }
        },
        "isAvailabilityZoneEnabled": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Boolean flag to turn on or off of Availability Zone"
            }
        },
        "osDiskSizeGB": {
            "defaultValue": 0,
            "minValue": 0,
            "maxValue": 1023,
            "type": "Int",
            "metadata": {
                "description": "Disk size (in GiB) to provision for each of the agent pool nodes. This value ranges from 0 to 1023. Specifying 0 will apply the default disk size for that agentVMSize."
            }
        },
        "agentCount": {
            "defaultValue": 3,
            "minValue": 1,
            "maxValue": 50,
            "type": "Int",
            "metadata": {
                "description": "The number of agent nodes for the cluster. Production workloads have a recommended minimum of 3."
            }
        },
        "scaleSetEvictionPolicy": {
            "defaultValue": "Delete",
            "allowedValues": [
                "Delete",
                "Deallocate"
            ],
            "type": "String",
            "metadata": {
                "description": "Specifies the ScaleSetEvictionPolicy to be used to specify eviction policy for spot virtual machine scale set. Default to Delete. Allowed values are Delete or Deallocate."
            }
        },
        "scaleSetPriority": {
            "defaultValue": "Regular",
            "allowedValues": [
                "Spot",
                "Regular"
            ],
            "type": "String",
            "metadata": {
                "description": "Specifies the virtual machine scale set priority in the user node pool: Spot or Regular."
            }
        },
        "agentTags": {
            "defaultValue": {},
            "type": "Object",
            "metadata": {
                "description": "Specifies the tags of the agent pool."
            }
        },
        "enableNodePublicIP": {
            "defaultValue": false,
            "type": "Bool",
            "metadata": {
                "description": "Some scenarios may require nodes in a node pool to receive their own dedicated public IP addresses."
            }
        },
        "agentNodeTaints": {
            "defaultValue": [],
            "type": "Array",
            "metadata": {
                "description": "Specifies the taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule. - string."
            }
        },
        "agentNodeLables": {
            "defaultValue": {},
            "type": "Object",
            "metadata": {
                "description": "Specifies the Agent pool node labels to be persisted across all nodes in the system node pool."
            }
        },
        "agentAvailabilityZones": {
            "defaultValue": [],
            "type": "Array",
            "metadata": {
                "description": "Specifies the availability zones for the agent nodes in the agent node pool. Requires the use of VirtualMachineScaleSets as node pool type."
            }
        },
        "agentMode": {
            "defaultValue": "System",
            "allowedValues": [
                "System",
                "User"
            ],
            "type": "String",
            "metadata": {
                "description": "A cluster must have at least one 'System' Agent Pool at all times."
            }
        },
        "agentMaxPods": {
            "defaultValue": 30,
            "type": "Int",
            "metadata": {
                "description": "Specifies the maximum number of pods that can run on a node in the agent node pool. The maximum number of pods per node in an AKS cluster is 250. The default maximum number of pods per node varies between kubenet and Azure CNI networking, and the method of cluster deployment."
            }
        },
        "agentOSType": {
            "defaultValue": "Linux",
            "allowedValues": [
                "Linux",
                "Windows"
            ],
            "type": "String",
            "metadata": {
                "description": "The type of operating system for agent pool."
            }
        },
        "agentVMSize": {
            "defaultValue": "Standard_D2_v3",
            "type": "String",
            "metadata": {
                "description": "The size of the Virtual Machine."
            }
        },
        "agentMaxCount": {
            "defaultValue": 5,
            "type": "Int",
            "metadata": {
                "description": "Specifies the maximum number of nodes for auto-scaling for the system node pool."
            }
        },
        "agentMinCount": {
            "defaultValue": 3,
            "type": "Int",
            "metadata": {
                "description": "Specifies the minimum number of nodes for auto-scaling for the system node pool."
            }
        },
        "enableAutoScaling": {
            "defaultValue": true,
            "type": "Bool",
            "metadata": {
                "description": "Specifies whether to enable auto-scaling for the system node pool."
            }
        },
        "serviceMeshMode": {
            "defaultValue": "Disabled",
            "allowedValues": [
                "Disabled",
                "Istio"
            ],
            "type": "String"
        },
        "istioInternalIngressGateway": {
            "defaultValue": false,
            "type": "Bool"
        },
        "istioExternalIngressGateway": {
            "defaultValue": false,
            "type": "Bool"
        },
        "nodeOSUpgradeChannel": {
            "defaultValue": "NodeImage",
            "allowedValues": [
                "None",
                "Unmanaged",
                "SecurityPatch",
                "NodeImage"
            ],
            "type": "String",
            "metadata": {
                "description": "Auto upgrade channel for node OS security."
            }
        },
        "isImageCleanerEnabled": {
            "defaultValue": false,
            "type": "Bool"
        },
        "imageCleanerIntervalHours": {
            "defaultValue": 168,
            "type": "Int"
        },
        "enableOIDC": {
            "defaultValue": true,
            "type": "Bool",
            "metadata": {
                "description": "Whether the OIDC issuer is enabled."
            }
        },
        "issuerURL": {
            "defaultValue": "",
            "type": "String",
            "metadata": {
                "description": "The OIDC issuer url of the Managed Cluster."
            }
        },
        "enableWorkloadIdentity": {
            "defaultValue": true,
            "type": "Bool",
            "metadata": {
                "description": "Whether to enable workload identity."
            }
        }
    },
    "variables": {
        "isScaleSetPrioritySpot": "[equals(parameters('scaleSetPriority'), 'Spot')]",
        "defaultAadProfile": {
            "managed": true,
            "adminGroupObjectIDs": "[parameters('adminGroupObjectIDs')]",
            "enableAzureRBAC": "[parameters('azureRbac')]"
        },
        "defaultApiServerAccessProfile": {
            "authorizedIPRanges": "[if(parameters('enableAuthorizedIpRange'), parameters('authorizedIPRanges'), null())]",
            "enablePrivateCluster": "[parameters('enablePrivateCluster')]"
        },
        "defaultAzurePolicy": {
            "enabled": "[parameters('enableAzurePolicy')]"
        },
        "defaultSecrectStoreProvider": {
            "enabled": "[parameters('enableSecretStoreCSIDriver')]",
            "config": "[if(parameters('enableSecretStoreCSIDriver'), variables('secrectStoreConfig'), null())]"
        },
        "secrectStoreConfig": {
            "enableSecretRotation": "false",
            "rotationPollInterval": "2m"
        },
        "servicePrincipalProfile": {
            "ClientId": "[parameters('servicePrincipalClientId')]",
            "Secret": "[parameters('servicePrincipalClientSecret')]"
        }
    },
    "resources": [
        {
            "type": "Microsoft.ContainerService/managedClusters/maintenanceConfigurations",
            "apiVersion": "2023-10-01",
            "name": "aks-mon-portal/aksManagedAutoUpgradeSchedule",
            "dependsOn": [
                "[concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))]"
            ],
            "properties": {
                "maintenanceWindow": {
                    "schedule": {
                        "daily": null,
                        "weekly": {
                            "intervalWeeks": 1,
                            "dayOfWeek": "Sunday"
                        },
                        "absoluteMonthly": null,
                        "relativeMonthly": null
                    },
                    "durationHours": 4,
                    "utcOffset": "+00:00",
                    "startDate": "2025-01-24",
                    "startTime": "00:00"
                }
            }
        },
        {
            "type": "Microsoft.ContainerService/managedClusters/maintenanceConfigurations",
            "apiVersion": "2023-10-01",
            "name": "aks-mon-portal/aksManagedNodeOSUpgradeSchedule",
            "dependsOn": [
                "[concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))]"
            ],
            "properties": {
                "maintenanceWindow": {
                    "schedule": {
                        "weekly": {
                            "intervalWeeks": 1,
                            "dayOfWeek": "Sunday"
                        }
                    },
                    "durationHours": 4,
                    "utcOffset": "+00:00",
                    "startDate": "2025-01-24",
                    "startTime": "00:00"
                }
            }
        },
        {
            "type": "Microsoft.ContainerService/managedClusters",
            "apiVersion": "[parameters('apiVersion')]",
            "name": "[parameters('resourceName')]",
            "location": "[parameters('location')]",
            "dependsOn": [],
            "tags": "[parameters('clusterTags')]",
            "sku": "[parameters('clusterSku')]",
            "identity": "[parameters('clusterIdentity')]",
            "properties": {
                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                "enableRBAC": "[parameters('enableRBAC')]",
                "dnsPrefix": "[parameters('dnsPrefix')]",
                "nodeResourceGroup": "[parameters('nodeResourceGroup')]",
                "disableLocalAccounts": "[parameters('disableLocalAccounts')]",
                "aadProfile": "[if(parameters('enableAadProfile'), variables('defaultAadProfile'), null())]",
                "autoUpgradeProfile": {
                    "upgradeChannel": "[parameters('upgradeChannel')]",
                    "nodeOSUpgradeChannel": "[parameters('nodeOSUpgradeChannel')]"
                },
                "agentPoolProfiles": [
                    {
                        "name": "agentpool",
                        "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                        "count": 2,
                        "enableAutoScaling": true,
                        "minCount": 2,
                        "maxCount": 5,
                        "vmSize": "Standard_D4ds_v5",
                        "osType": "Linux",
                        "osSKU": "Ubuntu",
                        "type": "VirtualMachineScaleSets",
                        "mode": "System",
                        "maxPods": 110,
                        "availabilityZones": [],
                        "nodeTaints": [],
                        "enableNodePublicIP": false,
                        "tags": {}
                    }
                ],
                "apiServerAccessProfile": "[if(parameters('isPrivateClusterSupported'), variables('defaultApiServerAccessProfile'), null())]",
                "addonProfiles": {
                    "azurepolicy": "[if(parameters('isAzurePolicySupported'), variables('defaultAzurePolicy'), null())]",
                    "azureKeyvaultSecretsProvider": "[if(parameters('isSecretStoreCSIDDriverSupported'), variables('defaultSecrectStoreProvider'), null())]"
                },
                "diskEncryptionSetID": "[if(parameters('enableDiskEncryptionSetID'), parameters('diskEncryptionSetID'), null())]",
                "networkProfile": {
                    "loadBalancerSku": "[parameters('loadBalancerSku')]",
                    "networkPlugin": "[parameters('networkPlugin')]",
                    "networkPluginMode": "[parameters('networkPluginMode')]",
                    "networkDataplane": "[parameters('networkDataplane')]",
                    "networkPolicy": "[parameters('networkPolicy')]",
                    "serviceCidr": "[parameters('serviceCidr')]",
                    "dnsServiceIP": "[parameters('dnsServiceIP')]"
                },
                "supportPlan": "[parameters('supportPlan')]",
                "securityProfile": {
                    "imageCleaner": {
                        "enabled": "[parameters('isImageCleanerEnabled')]",
                        "intervalHours": "[parameters('imageCleanerIntervalHours')]"
                    },
                    "workloadIdentity": {
                        "enabled": "[parameters('enableWorkloadIdentity')]"
                    }
                },
                "oidcIssuerProfile": {
                    "enabled": "[parameters('enableOIDC')]"
                }
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "name": "CreatePromDCE-20250123231032-44",
            "dependsOn": [
                "[concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "name": "MSProm-eastus-aks-mon-portal",
                            "type": "Microsoft.Insights/dataCollectionEndpoints",
                            "location": "eastus",
                            "kind": "Linux",
                            "apiVersion": "2022-06-01",
                            "properties": {},
                            "tags": "[parameters('tagsForAllResources')]"
                        }
                    ]
                }
            },
            "subscriptionId": "dac4cab6-7da3-4bba-a0c6-b93e33e6717a",
            "resourceGroup": "aks-mon-portal-rg"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "name": "CreatePromDCR-20250123231032-4",
            "dependsOn": [
                "Microsoft.Resources/deployments/CreatePromDCE-20250123231032-44",
                "Microsoft.Resources/deployments/CreateAzureMonitorWorkspace-20250123231032-94"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Insights/dataCollectionRules",
                            "location": "eastus",
                            "name": "MSProm-eastus-aks-mon-portal",
                            "apiVersion": "2022-06-01",
                            "kind": "Linux",
                            "properties": {
                                "dataCollectionEndpointId": "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourceGroups/aks-mon-portal-rg/providers/Microsoft.Insights/dataCollectionEndpoints/MSProm-eastus-aks-mon-portal",
                                "dataSources": {
                                    "prometheusForwarder": [
                                        {
                                            "name": "PrometheusDataSource",
                                            "streams": [
                                                "Microsoft-PrometheusMetrics"
                                            ],
                                            "labelIncludeFilter": {}
                                        }
                                    ]
                                },
                                "destinations": {
                                    "monitoringAccounts": [
                                        {
                                            "accountResourceId": "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourcegroups/aks-mon-portal-rg/providers/Microsoft.monitor/accounts/aks-mon-portal",
                                            "name": "MonitoringAccount1"
                                        }
                                    ]
                                },
                                "dataFlows": [
                                    {
                                        "destinations": [
                                            "MonitoringAccount1"
                                        ],
                                        "streams": [
                                            "Microsoft-PrometheusMetrics"
                                        ]
                                    }
                                ]
                            },
                            "tags": "[parameters('tagsForAllResources')]"
                        }
                    ]
                }
            },
            "subscriptionId": "dac4cab6-7da3-4bba-a0c6-b93e33e6717a",
            "resourceGroup": "aks-mon-portal-rg"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "name": "CreatePromDCRA-20250123231032-20",
            "dependsOn": [
                "Microsoft.Resources/deployments/CreatePromDCR-20250123231032-4"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Insights/dataCollectionRuleAssociations",
                            "name": "ContainerInsightsMetricsExtension",
                            "apiVersion": "2022-06-01",
                            "properties": {
                                "description": "Association of data collection rule. Deleting this association will break the prometheus metrics data collection for this AKS Cluster.",
                                "dataCollectionRuleId": "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourcegroups/aks-mon-portal-rg/providers/Microsoft.Insights/dataCollectionRules/MSProm-eastus-aks-mon-portal"
                            },
                            "id": "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourcegroups/aks-mon-portal-rg/providers/microsoft.containerservice/managedclusters/aks-mon-portal/providers/Microsoft.Insights/dataCollectionRuleAssociations/ContainerInsightsMetricsExtension",
                            "scope": "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourcegroups/aks-mon-portal-rg/providers/microsoft.containerservice/managedclusters/aks-mon-portal"
                        }
                    ]
                }
            },
            "subscriptionId": "dac4cab6-7da3-4bba-a0c6-b93e33e6717a",
            "resourceGroup": "aks-mon-portal-rg"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "name": "CreatePromRecordingRules-20250123231032-44",
            "dependsOn": [
                "[concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))]",
                "Microsoft.Resources/deployments/CreateAzureMonitorWorkspace-20250123231032-94"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "location": "eastus",
                            "name": "NodeRecordingRulesRuleGroup-aks-mon-portal",
                            "type": "Microsoft.AlertsManagement/prometheusRuleGroups",
                            "properties": {
                                "description": "Node Recording Rules RuleGroup",
                                "enabled": true,
                                "scopes": [
                                    "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourcegroups/aks-mon-portal-rg/providers/Microsoft.monitor/accounts/aks-mon-portal",
                                    "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourceGroups/aks-mon-portal-rg/providers/Microsoft.ContainerService/managedClusters/aks-mon-portal"
                                ],
                                "interval": "PT1M",
                                "clusterName": "aks-mon-portal",
                                "rules": [
                                    {
                                        "record": "instance:node_num_cpu:sum",
                                        "expression": "count without (cpu, mode) (  node_cpu_seconds_total{job=\"node\",mode=\"idle\"})"
                                    },
                                    {
                                        "record": "instance:node_cpu_utilisation:rate5m",
                                        "expression": "1 - avg without (cpu) (  sum without (mode) (rate(node_cpu_seconds_total{job=\"node\", mode=~\"idle|iowait|steal\"}[5m])))"
                                    },
                                    {
                                        "record": "instance:node_load1_per_cpu:ratio",
                                        "expression": "(  node_load1{job=\"node\"}/  instance:node_num_cpu:sum{job=\"node\"})"
                                    },
                                    {
                                        "record": "instance:node_memory_utilisation:ratio",
                                        "expression": "1 - (  (    node_memory_MemAvailable_bytes{job=\"node\"}    or    (      node_memory_Buffers_bytes{job=\"node\"}      +      node_memory_Cached_bytes{job=\"node\"}      +      node_memory_MemFree_bytes{job=\"node\"}      +      node_memory_Slab_bytes{job=\"node\"}    )  )/  node_memory_MemTotal_bytes{job=\"node\"})"
                                    },
                                    {
                                        "record": "instance:node_vmstat_pgmajfault:rate5m",
                                        "expression": "rate(node_vmstat_pgmajfault{job=\"node\"}[5m])"
                                    },
                                    {
                                        "record": "instance_device:node_disk_io_time_seconds:rate5m",
                                        "expression": "rate(node_disk_io_time_seconds_total{job=\"node\", device!=\"\"}[5m])"
                                    },
                                    {
                                        "record": "instance_device:node_disk_io_time_weighted_seconds:rate5m",
                                        "expression": "rate(node_disk_io_time_weighted_seconds_total{job=\"node\", device!=\"\"}[5m])"
                                    },
                                    {
                                        "record": "instance:node_network_receive_bytes_excluding_lo:rate5m",
                                        "expression": "sum without (device) (  rate(node_network_receive_bytes_total{job=\"node\", device!=\"lo\"}[5m]))"
                                    },
                                    {
                                        "record": "instance:node_network_transmit_bytes_excluding_lo:rate5m",
                                        "expression": "sum without (device) (  rate(node_network_transmit_bytes_total{job=\"node\", device!=\"lo\"}[5m]))"
                                    },
                                    {
                                        "record": "instance:node_network_receive_drop_excluding_lo:rate5m",
                                        "expression": "sum without (device) (  rate(node_network_receive_drop_total{job=\"node\", device!=\"lo\"}[5m]))"
                                    },
                                    {
                                        "record": "instance:node_network_transmit_drop_excluding_lo:rate5m",
                                        "expression": "sum without (device) (  rate(node_network_transmit_drop_total{job=\"node\", device!=\"lo\"}[5m]))"
                                    }
                                ]
                            },
                            "apiVersion": "2023-03-01",
                            "tags": "[parameters('tagsForAllResources')]"
                        },
                        {
                            "location": "eastus",
                            "name": "KubernetesRecordingRulesRuleGroup-aks-mon-portal",
                            "type": "Microsoft.AlertsManagement/prometheusRuleGroups",
                            "properties": {
                                "description": "Kubernetes Recording Rules RuleGroup",
                                "enabled": true,
                                "scopes": [
                                    "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourcegroups/aks-mon-portal-rg/providers/Microsoft.monitor/accounts/aks-mon-portal",
                                    "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourceGroups/aks-mon-portal-rg/providers/Microsoft.ContainerService/managedClusters/aks-mon-portal"
                                ],
                                "interval": "PT1M",
                                "clusterName": "aks-mon-portal",
                                "rules": [
                                    {
                                        "record": "node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate",
                                        "expression": "sum by (cluster, namespace, pod, container) (  irate(container_cpu_usage_seconds_total{job=\"cadvisor\", image!=\"\"}[5m])) * on (cluster, namespace, pod) group_left(node) topk by (cluster, namespace, pod) (  1, max by(cluster, namespace, pod, node) (kube_pod_info{node!=\"\"}))"
                                    },
                                    {
                                        "record": "node_namespace_pod_container:container_memory_working_set_bytes",
                                        "expression": "container_memory_working_set_bytes{job=\"cadvisor\", image!=\"\"}* on (namespace, pod) group_left(node) topk by(namespace, pod) (1,  max by(namespace, pod, node) (kube_pod_info{node!=\"\"}))"
                                    },
                                    {
                                        "record": "node_namespace_pod_container:container_memory_rss",
                                        "expression": "container_memory_rss{job=\"cadvisor\", image!=\"\"}* on (namespace, pod) group_left(node) topk by(namespace, pod) (1,  max by(namespace, pod, node) (kube_pod_info{node!=\"\"}))"
                                    },
                                    {
                                        "record": "node_namespace_pod_container:container_memory_cache",
                                        "expression": "container_memory_cache{job=\"cadvisor\", image!=\"\"}* on (namespace, pod) group_left(node) topk by(namespace, pod) (1,  max by(namespace, pod, node) (kube_pod_info{node!=\"\"}))"
                                    },
                                    {
                                        "record": "node_namespace_pod_container:container_memory_swap",
                                        "expression": "container_memory_swap{job=\"cadvisor\", image!=\"\"}* on (namespace, pod) group_left(node) topk by(namespace, pod) (1,  max by(namespace, pod, node) (kube_pod_info{node!=\"\"}))"
                                    },
                                    {
                                        "record": "cluster:namespace:pod_memory:active:kube_pod_container_resource_requests",
                                        "expression": "kube_pod_container_resource_requests{resource=\"memory\",job=\"kube-state-metrics\"}  * on (namespace, pod, cluster)group_left() max by (namespace, pod, cluster) (  (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1))"
                                    },
                                    {
                                        "record": "namespace_memory:kube_pod_container_resource_requests:sum",
                                        "expression": "sum by (namespace, cluster) (    sum by (namespace, pod, cluster) (        max by (namespace, pod, container, cluster) (          kube_pod_container_resource_requests{resource=\"memory\",job=\"kube-state-metrics\"}        ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1        )    ))"
                                    },
                                    {
                                        "record": "cluster:namespace:pod_cpu:active:kube_pod_container_resource_requests",
                                        "expression": "kube_pod_container_resource_requests{resource=\"cpu\",job=\"kube-state-metrics\"}  * on (namespace, pod, cluster)group_left() max by (namespace, pod, cluster) (  (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1))"
                                    },
                                    {
                                        "record": "namespace_cpu:kube_pod_container_resource_requests:sum",
                                        "expression": "sum by (namespace, cluster) (    sum by (namespace, pod, cluster) (        max by (namespace, pod, container, cluster) (          kube_pod_container_resource_requests{resource=\"cpu\",job=\"kube-state-metrics\"}        ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1        )    ))"
                                    },
                                    {
                                        "record": "cluster:namespace:pod_memory:active:kube_pod_container_resource_limits",
                                        "expression": "kube_pod_container_resource_limits{resource=\"memory\",job=\"kube-state-metrics\"}  * on (namespace, pod, cluster)group_left() max by (namespace, pod, cluster) (  (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1))"
                                    },
                                    {
                                        "record": "namespace_memory:kube_pod_container_resource_limits:sum",
                                        "expression": "sum by (namespace, cluster) (    sum by (namespace, pod, cluster) (        max by (namespace, pod, container, cluster) (          kube_pod_container_resource_limits{resource=\"memory\",job=\"kube-state-metrics\"}        ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1        )    ))"
                                    },
                                    {
                                        "record": "cluster:namespace:pod_cpu:active:kube_pod_container_resource_limits",
                                        "expression": "kube_pod_container_resource_limits{resource=\"cpu\",job=\"kube-state-metrics\"}  * on (namespace, pod, cluster)group_left() max by (namespace, pod, cluster) ( (kube_pod_status_phase{phase=~\"Pending|Running\"} == 1) )"
                                    },
                                    {
                                        "record": "namespace_cpu:kube_pod_container_resource_limits:sum",
                                        "expression": "sum by (namespace, cluster) (    sum by (namespace, pod, cluster) (        max by (namespace, pod, container, cluster) (          kube_pod_container_resource_limits{resource=\"cpu\",job=\"kube-state-metrics\"}        ) * on(namespace, pod, cluster) group_left() max by (namespace, pod, cluster) (          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1        )    ))"
                                    },
                                    {
                                        "record": "namespace_workload_pod:kube_pod_owner:relabel",
                                        "expression": "max by (cluster, namespace, workload, pod) (  label_replace(    label_replace(      kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"ReplicaSet\"},      \"replicaset\", \"$1\", \"owner_name\", \"(.*)\"    ) * on(replicaset, namespace) group_left(owner_name) topk by(replicaset, namespace) (      1, max by (replicaset, namespace, owner_name) (        kube_replicaset_owner{job=\"kube-state-metrics\"}      )    ),    \"workload\", \"$1\", \"owner_name\", \"(.*)\"  ))",
                                        "labels": {
                                            "workload_type": "deployment"
                                        }
                                    },
                                    {
                                        "record": "namespace_workload_pod:kube_pod_owner:relabel",
                                        "expression": "max by (cluster, namespace, workload, pod) (  label_replace(    kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"DaemonSet\"},    \"workload\", \"$1\", \"owner_name\", \"(.*)\"  ))",
                                        "labels": {
                                            "workload_type": "daemonset"
                                        }
                                    },
                                    {
                                        "record": "namespace_workload_pod:kube_pod_owner:relabel",
                                        "expression": "max by (cluster, namespace, workload, pod) (  label_replace(    kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"StatefulSet\"},    \"workload\", \"$1\", \"owner_name\", \"(.*)\"  ))",
                                        "labels": {
                                            "workload_type": "statefulset"
                                        }
                                    },
                                    {
                                        "record": "namespace_workload_pod:kube_pod_owner:relabel",
                                        "expression": "max by (cluster, namespace, workload, pod) (  label_replace(    kube_pod_owner{job=\"kube-state-metrics\", owner_kind=\"Job\"},    \"workload\", \"$1\", \"owner_name\", \"(.*)\"  ))",
                                        "labels": {
                                            "workload_type": "job"
                                        }
                                    },
                                    {
                                        "record": ":node_memory_MemAvailable_bytes:sum",
                                        "expression": "sum(  node_memory_MemAvailable_bytes{job=\"node\"} or  (    node_memory_Buffers_bytes{job=\"node\"} +    node_memory_Cached_bytes{job=\"node\"} +    node_memory_MemFree_bytes{job=\"node\"} +    node_memory_Slab_bytes{job=\"node\"}  )) by (cluster)"
                                    },
                                    {
                                        "record": "cluster:node_cpu:ratio_rate5m",
                                        "expression": "sum(rate(node_cpu_seconds_total{job=\"node\",mode!=\"idle\",mode!=\"iowait\",mode!=\"steal\"}[5m])) by (cluster) /count(sum(node_cpu_seconds_total{job=\"node\"}) by (cluster, instance, cpu)) by (cluster)"
                                    }
                                ]
                            },
                            "apiVersion": "2023-03-01",
                            "tags": "[parameters('tagsForAllResources')]"
                        },
                        {
                            "location": "eastus",
                            "name": "UXRecordingRulesRuleGroup - aks-mon-portal",
                            "type": "Microsoft.AlertsManagement/prometheusRuleGroups",
                            "properties": {
                                "description": "UX Recording Rules for Linux",
                                "enabled": true,
                                "scopes": [
                                    "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourcegroups/aks-mon-portal-rg/providers/Microsoft.monitor/accounts/aks-mon-portal",
                                    "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourceGroups/aks-mon-portal-rg/providers/Microsoft.ContainerService/managedClusters/aks-mon-portal"
                                ],
                                "interval": "PT1M",
                                "clusterName": "aks-mon-portal",
                                "rules": [
                                    {
                                        "record": "ux:pod_cpu_usage:sum_irate",
                                        "expression": "(sum by (namespace, pod, cluster, microsoft_resourceid) (\n\tirate(container_cpu_usage_seconds_total{container != \"\", pod != \"\", job = \"cadvisor\"}[5m])\n)) * on (pod, namespace, cluster, microsoft_resourceid) group_left (node, created_by_name, created_by_kind)\n(max by (node, created_by_name, created_by_kind, pod, namespace, cluster, microsoft_resourceid) (kube_pod_info{pod != \"\", job = \"kube-state-metrics\"}))"
                                    },
                                    {
                                        "record": "ux:controller_cpu_usage:sum_irate",
                                        "expression": "sum by (namespace, node, cluster, created_by_name, created_by_kind, microsoft_resourceid) (\nux:pod_cpu_usage:sum_irate\n)\n"
                                    },
                                    {
                                        "record": "ux:pod_workingset_memory:sum",
                                        "expression": "(\n\t    sum by (namespace, pod, cluster, microsoft_resourceid) (\n\t\tcontainer_memory_working_set_bytes{container != \"\", pod != \"\", job = \"cadvisor\"}\n\t    )\n\t) * on (pod, namespace, cluster, microsoft_resourceid) group_left (node, created_by_name, created_by_kind)\n(max by (node, created_by_name, created_by_kind, pod, namespace, cluster, microsoft_resourceid) (kube_pod_info{pod != \"\", job = \"kube-state-metrics\"}))"
                                    },
                                    {
                                        "record": "ux:controller_workingset_memory:sum",
                                        "expression": "sum by (namespace, node, cluster, created_by_name, created_by_kind, microsoft_resourceid) (\nux:pod_workingset_memory:sum\n)"
                                    },
                                    {
                                        "record": "ux:pod_rss_memory:sum",
                                        "expression": "(\n\t    sum by (namespace, pod, cluster, microsoft_resourceid) (\n\t\tcontainer_memory_rss{container != \"\", pod != \"\", job = \"cadvisor\"}\n\t    )\n\t) * on (pod, namespace, cluster, microsoft_resourceid) group_left (node, created_by_name, created_by_kind)\n(max by (node, created_by_name, created_by_kind, pod, namespace, cluster, microsoft_resourceid) (kube_pod_info{pod != \"\", job = \"kube-state-metrics\"}))"
                                    },
                                    {
                                        "record": "ux:controller_rss_memory:sum",
                                        "expression": "sum by (namespace, node, cluster, created_by_name, created_by_kind, microsoft_resourceid) (\nux:pod_rss_memory:sum\n)"
                                    },
                                    {
                                        "record": "ux:pod_container_count:sum",
                                        "expression": "sum by (node, created_by_name, created_by_kind, namespace, cluster, pod, microsoft_resourceid) (\n(\n(\nsum by (container, pod, namespace, cluster, microsoft_resourceid) (kube_pod_container_info{container != \"\", pod != \"\", container_id != \"\", job = \"kube-state-metrics\"})\nor sum by (container, pod, namespace, cluster, microsoft_resourceid) (kube_pod_init_container_info{container != \"\", pod != \"\", container_id != \"\", job = \"kube-state-metrics\"})\n)\n* on (pod, namespace, cluster, microsoft_resourceid) group_left (node, created_by_name, created_by_kind)\n(\nmax by (node, created_by_name, created_by_kind, pod, namespace, cluster, microsoft_resourceid) (\n\tkube_pod_info{pod != \"\", job = \"kube-state-metrics\"}\n)\n)\n)\n\n)"
                                    },
                                    {
                                        "record": "ux:controller_container_count:sum",
                                        "expression": "sum by (node, created_by_name, created_by_kind, namespace, cluster, microsoft_resourceid) (\nux:pod_container_count:sum\n)"
                                    },
                                    {
                                        "record": "ux:pod_container_restarts:max",
                                        "expression": "max by (node, created_by_name, created_by_kind, namespace, cluster, pod, microsoft_resourceid) (\n(\n(\nmax by (container, pod, namespace, cluster, microsoft_resourceid) (kube_pod_container_status_restarts_total{container != \"\", pod != \"\", job = \"kube-state-metrics\"})\nor sum by (container, pod, namespace, cluster, microsoft_resourceid) (kube_pod_init_status_restarts_total{container != \"\", pod != \"\", job = \"kube-state-metrics\"})\n)\n* on (pod, namespace, cluster, microsoft_resourceid) group_left (node, created_by_name, created_by_kind)\n(\nmax by (node, created_by_name, created_by_kind, pod, namespace, cluster, microsoft_resourceid) (\n\tkube_pod_info{pod != \"\", job = \"kube-state-metrics\"}\n)\n)\n)\n\n)"
                                    },
                                    {
                                        "record": "ux:controller_container_restarts:max",
                                        "expression": "max by (node, created_by_name, created_by_kind, namespace, cluster, microsoft_resourceid) (\nux:pod_container_restarts:max\n)"
                                    },
                                    {
                                        "record": "ux:pod_resource_limit:sum",
                                        "expression": "(sum by (cluster, pod, namespace, resource, microsoft_resourceid) (\n(\n\tmax by (cluster, microsoft_resourceid, pod, container, namespace, resource)\n\t (kube_pod_container_resource_limits{container != \"\", pod != \"\", job = \"kube-state-metrics\"})\n)\n)unless (count by (pod, namespace, cluster, resource, microsoft_resourceid)\n\t(kube_pod_container_resource_limits{container != \"\", pod != \"\", job = \"kube-state-metrics\"})\n!= on (pod, namespace, cluster, microsoft_resourceid) group_left()\n sum by (pod, namespace, cluster, microsoft_resourceid)\n (kube_pod_container_info{container != \"\", pod != \"\", job = \"kube-state-metrics\"}) \n)\n\n)* on (namespace, pod, cluster, microsoft_resourceid) group_left (node, created_by_kind, created_by_name)\n(\n\tkube_pod_info{pod != \"\", job = \"kube-state-metrics\"}\n)"
                                    },
                                    {
                                        "record": "ux:controller_resource_limit:sum",
                                        "expression": "sum by (cluster, namespace, created_by_name, created_by_kind, node, resource, microsoft_resourceid) (\nux:pod_resource_limit:sum\n)"
                                    },
                                    {
                                        "record": "ux:controller_pod_phase_count:sum",
                                        "expression": "sum by (cluster, phase, node, created_by_kind, created_by_name, namespace, microsoft_resourceid) ( (\n(kube_pod_status_phase{job=\"kube-state-metrics\",pod!=\"\"})\n or (label_replace((count(kube_pod_deletion_timestamp{job=\"kube-state-metrics\",pod!=\"\"}) by (namespace, pod, cluster, microsoft_resourceid) * count(kube_pod_status_reason{reason=\"NodeLost\", job=\"kube-state-metrics\"} == 0) by (namespace, pod, cluster, microsoft_resourceid)), \"phase\", \"terminating\", \"\", \"\"))) * on (pod, namespace, cluster, microsoft_resourceid) group_left (node, created_by_name, created_by_kind)\n(\nmax by (node, created_by_name, created_by_kind, pod, namespace, cluster, microsoft_resourceid) (\nkube_pod_info{job=\"kube-state-metrics\",pod!=\"\"}\n)\n)\n)"
                                    },
                                    {
                                        "record": "ux:cluster_pod_phase_count:sum",
                                        "expression": "sum by (cluster, phase, node, namespace, microsoft_resourceid) (\nux:controller_pod_phase_count:sum\n)"
                                    },
                                    {
                                        "record": "ux:node_cpu_usage:sum_irate",
                                        "expression": "sum by (instance, cluster, microsoft_resourceid) (\n(1 - irate(node_cpu_seconds_total{job=\"node\", mode=\"idle\"}[5m]))\n)"
                                    },
                                    {
                                        "record": "ux:node_memory_usage:sum",
                                        "expression": "sum by (instance, cluster, microsoft_resourceid) ((\nnode_memory_MemTotal_bytes{job = \"node\"}\n- node_memory_MemFree_bytes{job = \"node\"} \n- node_memory_cached_bytes{job = \"node\"}\n- node_memory_buffers_bytes{job = \"node\"}\n))"
                                    },
                                    {
                                        "record": "ux:node_network_receive_drop_total:sum_irate",
                                        "expression": "sum by (instance, cluster, microsoft_resourceid) (irate(node_network_receive_drop_total{job=\"node\", device!=\"lo\"}[5m]))"
                                    },
                                    {
                                        "record": "ux:node_network_transmit_drop_total:sum_irate",
                                        "expression": "sum by (instance, cluster, microsoft_resourceid) (irate(node_network_transmit_drop_total{job=\"node\", device!=\"lo\"}[5m]))"
                                    }
                                ]
                            },
                            "apiVersion": "2023-03-01",
                            "tags": "[parameters('tagsForAllResources')]"
                        },
                        {
                            "location": "eastus",
                            "name": "NodeRecordingRulesRuleGroup-Win-aks-mon-portal",
                            "type": "Microsoft.AlertsManagement/prometheusRuleGroups",
                            "properties": {
                                "description": "Node Recording Rules RuleGroup for Windows",
                                "enabled": false,
                                "scopes": [
                                    "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourcegroups/aks-mon-portal-rg/providers/Microsoft.monitor/accounts/aks-mon-portal",
                                    "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourceGroups/aks-mon-portal-rg/providers/Microsoft.ContainerService/managedClusters/aks-mon-portal"
                                ],
                                "interval": "PT1M",
                                "clusterName": "aks-mon-portal",
                                "rules": [
                                    {
                                        "record": "node:windows_node:sum",
                                        "expression": "count (windows_system_system_up_time{job=\"windows-exporter\"})"
                                    },
                                    {
                                        "record": "node:windows_node_num_cpu:sum",
                                        "expression": "count by (instance) (sum by (instance, core) (windows_cpu_time_total{job=\"windows-exporter\"}))"
                                    },
                                    {
                                        "record": ":windows_node_cpu_utilisation:avg5m",
                                        "expression": "1 - avg(rate(windows_cpu_time_total{job=\"windows-exporter\",mode=\"idle\"}[5m]))"
                                    },
                                    {
                                        "record": "node:windows_node_cpu_utilisation:avg5m",
                                        "expression": "1 - avg by (instance) (rate(windows_cpu_time_total{job=\"windows-exporter\",mode=\"idle\"}[5m]))"
                                    },
                                    {
                                        "record": ":windows_node_memory_utilisation:",
                                        "expression": "1 -sum(windows_memory_available_bytes{job=\"windows-exporter\"})/sum(windows_os_visible_memory_bytes{job=\"windows-exporter\"})"
                                    },
                                    {
                                        "record": ":windows_node_memory_MemFreeCached_bytes:sum",
                                        "expression": "sum(windows_memory_available_bytes{job=\"windows-exporter\"} + windows_memory_cache_bytes{job=\"windows-exporter\"})"
                                    },
                                    {
                                        "record": "node:windows_node_memory_totalCached_bytes:sum",
                                        "expression": "(windows_memory_cache_bytes{job=\"windows-exporter\"} + windows_memory_modified_page_list_bytes{job=\"windows-exporter\"} + windows_memory_standby_cache_core_bytes{job=\"windows-exporter\"} + windows_memory_standby_cache_normal_priority_bytes{job=\"windows-exporter\"} + windows_memory_standby_cache_reserve_bytes{job=\"windows-exporter\"})"
                                    },
                                    {
                                        "record": ":windows_node_memory_MemTotal_bytes:sum",
                                        "expression": "sum(windows_os_visible_memory_bytes{job=\"windows-exporter\"})"
                                    },
                                    {
                                        "record": "node:windows_node_memory_bytes_available:sum",
                                        "expression": "sum by (instance) ((windows_memory_available_bytes{job=\"windows-exporter\"}))"
                                    },
                                    {
                                        "record": "node:windows_node_memory_bytes_total:sum",
                                        "expression": "sum by (instance) (windows_os_visible_memory_bytes{job=\"windows-exporter\"})"
                                    },
                                    {
                                        "record": "node:windows_node_memory_utilisation:ratio",
                                        "expression": "(node:windows_node_memory_bytes_total:sum - node:windows_node_memory_bytes_available:sum) / scalar(sum(node:windows_node_memory_bytes_total:sum))"
                                    },
                                    {
                                        "record": "node:windows_node_memory_utilisation:",
                                        "expression": "1 - (node:windows_node_memory_bytes_available:sum / node:windows_node_memory_bytes_total:sum)"
                                    },
                                    {
                                        "record": "node:windows_node_memory_swap_io_pages:irate",
                                        "expression": "irate(windows_memory_swap_page_operations_total{job=\"windows-exporter\"}[5m])"
                                    },
                                    {
                                        "record": ":windows_node_disk_utilisation:avg_irate",
                                        "expression": "avg(irate(windows_logical_disk_read_seconds_total{job=\"windows-exporter\"}[5m]) + irate(windows_logical_disk_write_seconds_total{job=\"windows-exporter\"}[5m]))"
                                    },
                                    {
                                        "record": "node:windows_node_disk_utilisation:avg_irate",
                                        "expression": "avg by (instance) ((irate(windows_logical_disk_read_seconds_total{job=\"windows-exporter\"}[5m]) + irate(windows_logical_disk_write_seconds_total{job=\"windows-exporter\"}[5m])))"
                                    }
                                ]
                            },
                            "apiVersion": "2023-03-01",
                            "tags": "[parameters('tagsForAllResources')]"
                        },
                        {
                            "location": "eastus",
                            "name": "NodeAndKubernetesRecordingRulesRuleGroup-Win-aks-mon-portal",
                            "type": "Microsoft.AlertsManagement/prometheusRuleGroups",
                            "properties": {
                                "description": "Node and Kubernetes Recording Rules RuleGroup for Windows",
                                "enabled": false,
                                "scopes": [
                                    "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourcegroups/aks-mon-portal-rg/providers/Microsoft.monitor/accounts/aks-mon-portal",
                                    "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourceGroups/aks-mon-portal-rg/providers/Microsoft.ContainerService/managedClusters/aks-mon-portal"
                                ],
                                "interval": "PT1M",
                                "clusterName": "aks-mon-portal",
                                "rules": [
                                    {
                                        "record": "node:windows_node_filesystem_usage:",
                                        "expression": "max by (instance,volume)((windows_logical_disk_size_bytes{job=\"windows-exporter\"} - windows_logical_disk_free_bytes{job=\"windows-exporter\"}) / windows_logical_disk_size_bytes{job=\"windows-exporter\"})"
                                    },
                                    {
                                        "record": "node:windows_node_filesystem_avail:",
                                        "expression": "max by (instance, volume) (windows_logical_disk_free_bytes{job=\"windows-exporter\"} / windows_logical_disk_size_bytes{job=\"windows-exporter\"})"
                                    },
                                    {
                                        "record": ":windows_node_net_utilisation:sum_irate",
                                        "expression": "sum(irate(windows_net_bytes_total{job=\"windows-exporter\"}[5m]))"
                                    },
                                    {
                                        "record": "node:windows_node_net_utilisation:sum_irate",
                                        "expression": "sum by (instance) ((irate(windows_net_bytes_total{job=\"windows-exporter\"}[5m])))"
                                    },
                                    {
                                        "record": ":windows_node_net_saturation:sum_irate",
                                        "expression": "sum(irate(windows_net_packets_received_discarded_total{job=\"windows-exporter\"}[5m])) + sum(irate(windows_net_packets_outbound_discarded_total{job=\"windows-exporter\"}[5m]))"
                                    },
                                    {
                                        "record": "node:windows_node_net_saturation:sum_irate",
                                        "expression": "sum by (instance) ((irate(windows_net_packets_received_discarded_total{job=\"windows-exporter\"}[5m]) + irate(windows_net_packets_outbound_discarded_total{job=\"windows-exporter\"}[5m])))"
                                    },
                                    {
                                        "record": "windows_pod_container_available",
                                        "expression": "windows_container_available{job=\"windows-exporter\", container_id != \"\"} * on(container_id) group_left(container, pod, namespace) max(kube_pod_container_info{job=\"kube-state-metrics\", container_id != \"\"}) by(container, container_id, pod, namespace)"
                                    },
                                    {
                                        "record": "windows_container_total_runtime",
                                        "expression": "windows_container_cpu_usage_seconds_total{job=\"windows-exporter\", container_id != \"\"} * on(container_id) group_left(container, pod, namespace) max(kube_pod_container_info{job=\"kube-state-metrics\", container_id != \"\"}) by(container, container_id, pod, namespace)"
                                    },
                                    {
                                        "record": "windows_container_memory_usage",
                                        "expression": "windows_container_memory_usage_commit_bytes{job=\"windows-exporter\", container_id != \"\"} * on(container_id) group_left(container, pod, namespace) max(kube_pod_container_info{job=\"kube-state-metrics\", container_id != \"\"}) by(container, container_id, pod, namespace)"
                                    },
                                    {
                                        "record": "windows_container_private_working_set_usage",
                                        "expression": "windows_container_memory_usage_private_working_set_bytes{job=\"windows-exporter\", container_id != \"\"} * on(container_id) group_left(container, pod, namespace) max(kube_pod_container_info{job=\"kube-state-metrics\", container_id != \"\"}) by(container, container_id, pod, namespace)"
                                    },
                                    {
                                        "record": "windows_container_network_received_bytes_total",
                                        "expression": "windows_container_network_receive_bytes_total{job=\"windows-exporter\", container_id != \"\"} * on(container_id) group_left(container, pod, namespace) max(kube_pod_container_info{job=\"kube-state-metrics\", container_id != \"\"}) by(container, container_id, pod, namespace)"
                                    },
                                    {
                                        "record": "windows_container_network_transmitted_bytes_total",
                                        "expression": "windows_container_network_transmit_bytes_total{job=\"windows-exporter\", container_id != \"\"} * on(container_id) group_left(container, pod, namespace) max(kube_pod_container_info{job=\"kube-state-metrics\", container_id != \"\"}) by(container, container_id, pod, namespace)"
                                    },
                                    {
                                        "record": "kube_pod_windows_container_resource_memory_request",
                                        "expression": "max by (namespace, pod, container) (kube_pod_container_resource_requests{resource=\"memory\",job=\"kube-state-metrics\"}) * on(container,pod,namespace) (windows_pod_container_available)"
                                    },
                                    {
                                        "record": "kube_pod_windows_container_resource_memory_limit",
                                        "expression": "kube_pod_container_resource_limits{resource=\"memory\",job=\"kube-state-metrics\"} * on(container,pod,namespace) (windows_pod_container_available)"
                                    },
                                    {
                                        "record": "kube_pod_windows_container_resource_cpu_cores_request",
                                        "expression": "max by (namespace, pod, container) ( kube_pod_container_resource_requests{resource=\"cpu\",job=\"kube-state-metrics\"}) * on(container,pod,namespace) (windows_pod_container_available)"
                                    },
                                    {
                                        "record": "kube_pod_windows_container_resource_cpu_cores_limit",
                                        "expression": "kube_pod_container_resource_limits{resource=\"cpu\",job=\"kube-state-metrics\"} * on(container,pod,namespace) (windows_pod_container_available)"
                                    },
                                    {
                                        "record": "namespace_pod_container:windows_container_cpu_usage_seconds_total:sum_rate",
                                        "expression": "sum by (namespace, pod, container) (rate(windows_container_total_runtime{}[5m]))"
                                    }
                                ]
                            },
                            "apiVersion": "2023-03-01",
                            "tags": "[parameters('tagsForAllResources')]"
                        },
                        {
                            "location": "eastus",
                            "name": "UXRecordingRulesRuleGroup-Win - aks-mon-portal",
                            "type": "Microsoft.AlertsManagement/prometheusRuleGroups",
                            "properties": {
                                "description": "UX Recording Rules for Windows",
                                "enabled": false,
                                "scopes": [
                                    "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourcegroups/aks-mon-portal-rg/providers/Microsoft.monitor/accounts/aks-mon-portal",
                                    "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourceGroups/aks-mon-portal-rg/providers/Microsoft.ContainerService/managedClusters/aks-mon-portal"
                                ],
                                "interval": "PT1M",
                                "clusterName": "aks-mon-portal",
                                "rules": [
                                    {
                                        "record": "ux:pod_cpu_usage_windows:sum_irate",
                                        "expression": "sum by (cluster, pod, namespace, node, created_by_kind, created_by_name, microsoft_resourceid) (\n\t(\n\t\tmax by (instance, container_id, cluster, microsoft_resourceid) (\n\t\t\tirate(windows_container_cpu_usage_seconds_total{ container_id != \"\", job = \"windows-exporter\"}[5m])\n\t\t) * on (container_id, cluster, microsoft_resourceid) group_left (container, pod, namespace) (\n\t\t\tmax by (container, container_id, pod, namespace, cluster, microsoft_resourceid) (\n\t\t\t\tkube_pod_container_info{container != \"\", pod != \"\", container_id != \"\", job = \"kube-state-metrics\"}\n\t\t\t)\n\t\t)\n\t) * on (pod, namespace, cluster, microsoft_resourceid) group_left (node, created_by_name, created_by_kind)\n\t(\n\t\tmax by (node, created_by_name, created_by_kind, pod, namespace, cluster, microsoft_resourceid) (\n\t\t  kube_pod_info{ pod != \"\", job = \"kube-state-metrics\"}\n\t\t)\n\t)\n)"
                                    },
                                    {
                                        "record": "ux:controller_cpu_usage_windows:sum_irate",
                                        "expression": "sum by (namespace, node, cluster, created_by_name, created_by_kind, microsoft_resourceid) (\nux:pod_cpu_usage_windows:sum_irate\n)\n"
                                    },
                                    {
                                        "record": "ux:pod_workingset_memory_windows:sum",
                                        "expression": "sum by (cluster, pod, namespace, node, created_by_kind, created_by_name, microsoft_resourceid) (\n\t(\n\t\tmax by (instance, container_id, cluster, microsoft_resourceid) (\n\t\t\twindows_container_memory_usage_private_working_set_bytes{ container_id != \"\", job = \"windows-exporter\"}\n\t\t) * on (container_id, cluster, microsoft_resourceid) group_left (container, pod, namespace) (\n\t\t\tmax by (container, container_id, pod, namespace, cluster, microsoft_resourceid) (\n\t\t\t\tkube_pod_container_info{container != \"\", pod != \"\", container_id != \"\", job = \"kube-state-metrics\"}\n\t\t\t)\n\t\t)\n\t) * on (pod, namespace, cluster, microsoft_resourceid) group_left (node, created_by_name, created_by_kind)\n\t(\n\t\tmax by (node, created_by_name, created_by_kind, pod, namespace, cluster, microsoft_resourceid) (\n\t\t  kube_pod_info{ pod != \"\", job = \"kube-state-metrics\"}\n\t\t)\n\t)\n)"
                                    },
                                    {
                                        "record": "ux:controller_workingset_memory_windows:sum",
                                        "expression": "sum by (namespace, node, cluster, created_by_name, created_by_kind, microsoft_resourceid) (\nux:pod_workingset_memory_windows:sum\n)"
                                    },
                                    {
                                        "record": "ux:node_cpu_usage_windows:sum_irate",
                                        "expression": "sum by (instance, cluster, microsoft_resourceid) (\n(1 - irate(windows_cpu_time_total{job=\"windows-exporter\", mode=\"idle\"}[5m]))\n)"
                                    },
                                    {
                                        "record": "ux:node_memory_usage_windows:sum",
                                        "expression": "sum by (instance, cluster, microsoft_resourceid) ((\nwindows_os_visible_memory_bytes{job = \"windows-exporter\"}\n- windows_memory_available_bytes{job = \"windows-exporter\"}\n))"
                                    },
                                    {
                                        "record": "ux:node_network_packets_received_drop_total_windows:sum_irate",
                                        "expression": "sum by (instance, cluster, microsoft_resourceid) (irate(windows_net_packets_received_discarded_total{job=\"windows-exporter\", device!=\"lo\"}[5m]))"
                                    },
                                    {
                                        "record": "ux:node_network_packets_outbound_drop_total_windows:sum_irate",
                                        "expression": "sum by (instance, cluster, microsoft_resourceid) (irate(windows_net_packets_outbound_discarded_total{job=\"windows-exporter\", device!=\"lo\"}[5m]))"
                                    }
                                ]
                            },
                            "apiVersion": "2023-03-01",
                            "tags": "[parameters('tagsForAllResources')]"
                        }
                    ]
                }
            },
            "subscriptionId": "dac4cab6-7da3-4bba-a0c6-b93e33e6717a",
            "resourceGroup": "aks-mon-portal-rg"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "name": "CreateAzureMonitorWorkspace-20250123231032-94",
            "dependsOn": [
                "Microsoft.Resources/deployments/CreatePromDCE-20250123231032-44"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "microsoft.monitor/accounts",
                            "name": "aks-mon-portal",
                            "location": "eastus",
                            "properties": {},
                            "apiVersion": "2023-04-03",
                            "tags": "[parameters('tagsForAllResources')]"
                        }
                    ]
                }
            },
            "subscriptionId": "dac4cab6-7da3-4bba-a0c6-b93e33e6717a",
            "resourceGroup": "aks-mon-portal-rg"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "name": "CreateGrafanaWorkspace-20250123231032-64",
            "dependsOn": [
                "[concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "microsoft.dashboard/grafana",
                            "name": "aks-mon-portal",
                            "location": "eastus",
                            "identity": {
                                "type": "SystemAssigned"
                            },
                            "sku": {
                                "name": "Standard"
                            },
                            "properties": {},
                            "apiVersion": "2022-08-01"
                        }
                    ],
                    "outputs": {
                        "msiPrincipalId": {
                            "type": "string",
                            "value": "[reference(resourceId('microsoft.dashboard/grafana', 'aks-mon-portal'), '2022-08-01', 'Full').identity.principalId]"
                        }
                    }
                },
                "expressionEvaluationOptions": {
                    "scope": "inner"
                }
            },
            "subscriptionId": "dac4cab6-7da3-4bba-a0c6-b93e33e6717a",
            "resourceGroup": "aks-mon-portal-rg"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "name": "AddAdministratorRoleForGrafana-20250123231032-4",
            "dependsOn": [
                "Microsoft.Resources/deployments/CreateGrafanaWorkspace-20250123231032-64"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Authorization/roleAssignments",
                            "apiVersion": "2022-04-01",
                            "name": "e94d8b78-20de-4720-e34c-7f55fcf5596d",
                            "scope": "microsoft.dashboard/grafana/aks-mon-portal",
                            "properties": {
                                "roleDefinitionId": "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourcegroups/aks-mon-portal-rg/providers/microsoft.dashboard/grafana/aks-mon-portal/providers/Microsoft.Authorization/roleDefinitions/22926164-76b3-42b3-bc55-97df8dab3e41",
                                "principalId": "cb4fc88c-d16d-4c75-895a-8042841b494b"
                            }
                        }
                    ]
                }
            },
            "subscriptionId": "dac4cab6-7da3-4bba-a0c6-b93e33e6717a",
            "resourceGroup": "aks-mon-portal-rg"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "name": "AddMRRToGrafMSIForGraf-20250123231032-93",
            "dependsOn": [
                "Microsoft.Resources/deployments/CreateGrafanaWorkspace-20250123231032-64"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Authorization/roleAssignments",
                            "apiVersion": "2022-04-01",
                            "name": "c084981d-0b68-3f6c-41a8-c416aaa3f1af",
                            "properties": {
                                "roleDefinitionId": "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourcegroups/aks-mon-portal-rg/providers/microsoft.dashboard/grafana/aks-mon-portal/providers/Microsoft.Authorization/roleDefinitions/43d0d8ad-25c7-4714-9337-8ba259a9fe05",
                                "principalId": "[reference('CreateGrafanaWorkspace-20250123231032-64').outputs.msiPrincipalId.value]"
                            }
                        }
                    ]
                }
            },
            "subscriptionId": "dac4cab6-7da3-4bba-a0c6-b93e33e6717a",
            "resourceGroup": "aks-mon-portal-rg"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "name": "AddMonitorDataReaderRoleAssignmentToGraphanaMS-20250123231032-20",
            "dependsOn": [
                "Microsoft.Resources/deployments/CreateAzureMonitorWorkspace-20250123231032-94",
                "Microsoft.Resources/deployments/CreateGrafanaWorkspace-20250123231032-64"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {},
                    "variables": {},
                    "resources": [
                        {
                            "type": "Microsoft.Authorization/roleAssignments",
                            "apiVersion": "2022-04-01",
                            "name": "4f900579-fa56-8423-a3ac-0ace5d128be9",
                            "properties": {
                                "roleDefinitionId": "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourcegroups/aks-mon-portal-rg/providers/Microsoft.monitor/accounts/aks-mon-portal/providers/Microsoft.Authorization/roleDefinitions/b0d8363b-8ddd-447d-831f-62ca05bff136",
                                "principalId": "[reference('CreateGrafanaWorkspace-20250123231032-64').outputs.msiPrincipalId.value]"
                            },
                            "scope": "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourcegroups/aks-mon-portal-rg/providers/Microsoft.monitor/accounts/aks-mon-portal"
                        }
                    ]
                }
            },
            "subscriptionId": "dac4cab6-7da3-4bba-a0c6-b93e33e6717a",
            "resourceGroup": "aks-mon-portal-rg"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "name": "AddAMWIntegrationToGrafana-20250123231032-20",
            "dependsOn": [
                "[concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))]",
                "Microsoft.Resources/deployments/AddMonitorDataReaderRoleAssignmentToGraphanaMS-20250123231032-20"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "type": "Microsoft.Dashboard/grafana",
                            "apiVersion": "2022-08-01",
                            "location": "eastus",
                            "name": "aks-mon-portal",
                            "properties": {
                                "grafanaIntegrations": {
                                    "azureMonitorWorkspaceIntegrations": [
                                        {
                                            "azureMonitorWorkspaceResourceId": "/subscriptions/dac4cab6-7da3-4bba-a0c6-b93e33e6717a/resourcegroups/aks-mon-portal-rg/providers/Microsoft.monitor/accounts/aks-mon-portal"
                                        }
                                    ]
                                }
                            },
                            "sku": {
                                "name": "Standard"
                            }
                        }
                    ]
                }
            },
            "subscriptionId": "dac4cab6-7da3-4bba-a0c6-b93e33e6717a",
            "resourceGroup": "aks-mon-portal-rg"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2019-05-01",
            "name": "ClusterOnboardingPut-e13e93c6-2c80-d0ab-4256-7171cade1396",
            "dependsOn": [
                "Microsoft.Resources/deployments/CreatePromDCRA-20250123231032-20",
                "Microsoft.Resources/deployments/CreatePromRecordingRules-20250123231032-44"
            ],
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                        {
                            "apiVersion": "2023-10-01",
                            "type": "microsoft.containerservice/managedclusters",
                            "location": "[parameters('location')]",
                            "sku": "[parameters('clusterSku')]",
                            "name": "aks-mon-portal",
                            "properties": {
                                "kubernetesVersion": "[parameters('kubernetesVersion')]",
                                "enableRBAC": "[parameters('enableRBAC')]",
                                "dnsPrefix": "[parameters('dnsPrefix')]",
                                "nodeResourceGroup": "[parameters('nodeResourceGroup')]",
                                "disableLocalAccounts": "[parameters('disableLocalAccounts')]",
                                "aadProfile": "[if(parameters('enableAadProfile'), variables('defaultAadProfile'), null())]",
                                "autoUpgradeProfile": {
                                    "upgradeChannel": "[parameters('upgradeChannel')]",
                                    "nodeOSUpgradeChannel": "[parameters('nodeOSUpgradeChannel')]"
                                },
                                "agentPoolProfiles": [
                                    {
                                        "name": "agentpool",
                                        "osDiskSizeGB": "[parameters('osDiskSizeGB')]",
                                        "count": 2,
                                        "enableAutoScaling": true,
                                        "minCount": 2,
                                        "maxCount": 5,
                                        "vmSize": "Standard_D4ds_v5",
                                        "osType": "Linux",
                                        "osSKU": "Ubuntu",
                                        "type": "VirtualMachineScaleSets",
                                        "mode": "System",
                                        "maxPods": 110,
                                        "availabilityZones": [],
                                        "nodeTaints": [],
                                        "enableNodePublicIP": false,
                                        "tags": {}
                                    }
                                ],
                                "apiServerAccessProfile": "[if(parameters('isPrivateClusterSupported'), variables('defaultApiServerAccessProfile'), null())]",
                                "addonProfiles": {
                                    "azurepolicy": "[if(parameters('isAzurePolicySupported'), variables('defaultAzurePolicy'), null())]",
                                    "azureKeyvaultSecretsProvider": "[if(parameters('isSecretStoreCSIDDriverSupported'), variables('defaultSecrectStoreProvider'), null())]"
                                },
                                "diskEncryptionSetID": "[if(parameters('enableDiskEncryptionSetID'), parameters('diskEncryptionSetID'), null())]",
                                "networkProfile": {
                                    "loadBalancerSku": "[parameters('loadBalancerSku')]",
                                    "networkPlugin": "[parameters('networkPlugin')]",
                                    "networkPluginMode": "[parameters('networkPluginMode')]",
                                    "networkDataplane": "[parameters('networkDataplane')]",
                                    "networkPolicy": "[parameters('networkPolicy')]",
                                    "serviceCidr": "[parameters('serviceCidr')]",
                                    "dnsServiceIP": "[parameters('dnsServiceIP')]"
                                },
                                "supportPlan": "[parameters('supportPlan')]",
                                "securityProfile": {
                                    "imageCleaner": {
                                        "enabled": "[parameters('isImageCleanerEnabled')]",
                                        "intervalHours": "[parameters('imageCleanerIntervalHours')]"
                                    },
                                    "workloadIdentity": {
                                        "enabled": "[parameters('enableWorkloadIdentity')]"
                                    }
                                },
                                "oidcIssuerProfile": {
                                    "enabled": "[parameters('enableOIDC')]"
                                },
                                "azureMonitorProfile": {
                                    "metrics": {
                                        "enabled": true,
                                        "kubeStateMetrics": {
                                            "metricLabelsAllowlist": "",
                                            "metricAnnotationsAllowList": ""
                                        }
                                    }
                                }
                            },
                            "identity": "[parameters('clusterIdentity')]",
                            "extendedLocation": "[if(parameters('isLocationEdgeZone'), parameters('edgeZone'), null())]",
                            "tags": "[parameters('clusterTags')]"
                        }
                    ]
                }
            },
            "subscriptionId": "dac4cab6-7da3-4bba-a0c6-b93e33e6717a",
            "resourceGroup": "aks-mon-portal-rg"
        }
    ],
    "outputs": {
        "controlPlaneFQDN": {
            "type": "String",
            "value": "[reference(concat('Microsoft.ContainerService/managedClusters/', parameters('resourceName'))).fqdn]"
        }
    }
}